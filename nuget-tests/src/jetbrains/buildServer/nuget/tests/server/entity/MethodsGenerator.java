

package jetbrains.buildServer.nuget.tests.server.entity;

import jetbrains.buildServer.util.FileUtil;
import org.jetbrains.annotations.NotNull;

import java.io.*;
import java.util.Arrays;
import java.util.Collection;

/**
 * Created by Eugene Petrenko (eugene.petrenko@gmail.com)
 * Date: 11.01.12 12:03
 */
public abstract class MethodsGenerator {
  protected final String myName;
  protected final Collection<MetadataBeanProperty> myProperties;

  public MethodsGenerator(@NotNull final String name,
                          @NotNull final Collection<MetadataBeanProperty> properties) {
    myName = name;
    myProperties = properties;
  }

  //interface or class
  protected abstract String getTypeKind();

  //extends foo implements bar
  protected abstract String getExtendsString();


  public final void generateSimpleBean() throws IOException {
    final File file = new File("nuget-server/src/jetbrains/buildServer/nuget/server/feed/server/javaFeed/entity/" + myName + ".java");
    final String pkg = "jetbrains.buildServer.nuget.server.feed.server.javaFeed.entity";
    FileUtil.createParentDirs(file);

    PrintWriter wr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "utf-8")));
    wr.println("/****");
    wr.println("****");
    wr.println("**** THIS CODE IS GENERATED BY " + getClass().getName());
    wr.println("**** DO NOT CHANGE!");
    wr.println("**** Generated with " + EntityGenerator.class + "");
    wr.println("**** ");
    wr.println("*****/");
    wr.println("package " + pkg + ";");
    wr.println();
    for (String imp : getImports()) {
      wr.println("import " + imp + ";");
    }
    wr.println();

    wr.println("public " + getTypeKind() + " " + myName + " " + getExtendsString() + " { ");
    generateBeforeContent(wr);
    wr.println();
    for (MetadataBeanProperty p : myProperties) {
      generateProperty(wr, p);
    }

    wr.println();

    generateAfterContent(wr);

    wr.println("}");
    wr.println();

    wr.flush();
    wr.close();
  }

  protected void generateProperty(@NotNull final PrintWriter wr,
                                  @NotNull final MetadataBeanProperty p) {
    generatePropertyDeclaration(wr, p);
    generatePropertyBody(wr, p);
  }

  @NotNull
  protected abstract String generatePropertyModifier(@NotNull final MetadataBeanProperty p);

  protected void generatePropertyDeclaration(@NotNull final PrintWriter wr,
                                             @NotNull final MetadataBeanProperty p) {
    wr.println();
    final String type = p.getType().getCanonicalJavaType().getName();
    final String name = p.getName();
    if (p.isNullable()) {
      wr.println("  @Nullable");
    } else {
      wr.println("  @NotNull");
    }
    String mod = generatePropertyModifier(p).trim();
    if (mod.length() > 0) mod += " ";
    wr.print("  " + mod + type + " get" + name + "()");
  }

  protected abstract void generatePropertyBody(@NotNull final PrintWriter wr,
                                               @NotNull final MetadataBeanProperty p);

  protected abstract void generateBeforeContent(@NotNull final PrintWriter wr);
  protected abstract void generateAfterContent(@NotNull final PrintWriter wr);

  protected Collection<String> getImports() {
    return Arrays.asList(
            "java.util.*",
            "java.lang.*",
            "org.odata4j.core.*",
            "org.odata4j.internal.*",
            "org.joda.time.*",
            "org.jetbrains.annotations.NotNull",
            "org.jetbrains.annotations.Nullable"
            );
  }
}
